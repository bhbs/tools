---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: noDeadCode.js
---
# Input
```js
// JsLabeledStatement
function JsLabeledStatement1() {
    label: while (true) {
        while (true) {
            if (true) {
                continue label;
            } else {
                break label;
            }
        }

        afterLabelJump();
    }
}

// JsTryStatement
function JsTryStatement1() {
    try {
        test();
        return;
    } catch(err) {
        test();
        return;
    }

    afterTryCatchReturn();
}

// JsTryFinallyStatement
function JsTryFinallyStatement1() {
    try {
        test();
    } catch(err) {
        test();
    } finally {
        test();
        return;
    }

    afterFinallyReturn();
}

// JsIfStatement
function JsIfStatement1() {
    if(true) {
        return;
    } else {
        return;
    }

    afterIfElseReturn();
}

// JsSwitchStatement
function JsSwitchStatement1() {
    switch(value) {
        case 0:
            case0();
            break;
        default:
            caseDefault();
            break;
        case 1: // afterDefault
            afterDefault();
    }
}

function JsSwitchStatement2() {
    switch(value) {
        case 0:
            break;
            afterBreak();
    }
}

// JsForStatement
function JsForStatement1() {
    for(let i = 0; i < 10; ++i) {
        break;
    }
}

// JsForInStatement
function JsForInStatement1() {
    for(const key in value) {
        break;
        afterBreak();
    }
}

function JsForInStatement2() {
    for(const key in value) {
        continue;
        afterContinue();
    }
}

// JsForOfStatement
function JsForOfStatement1() {
    for(const key of value) {
        break;
        afterBreak();
    }
}

function JsForOfStatement2() {
    for(const key of value) {
        continue;
        afterContinue();
    }
}

// JsWhileStatement
function JsWhileStatement1() {
    while(true) {
        break;
        afterBreak();
    }
}

// JsDoWhileStatement
function JsDoWhileStatement1() {
    do {
        break;
    } while(true); // afterBreak
}

function JsDoWhileStatement2() {
    do {
        continue;
        afterContinue();
    } while(true);
}

// JsBreakStatement
function JsBreakStatement1() {
    while(true) {
        break;
        break; // afterBreak
    }
}

function JsBreakStatement2() {
    while(true) {
        break;
        continue; // afterBreak
    }
}

// JsContinueStatement
function JsContinueStatement1() {
    while(true) {
        continue;
        continue; // afterContinue
    }
}

function JsContinueStatement2() {
    while(true) {
        continue;
        break; // afterContinue
    }
}

// JsReturnStatement
function JsReturnStatement1() {
    return;
    afterReturn();
}

function JsReturnStatement2() {
    return;
    return; // afterReturn
}

// JsThrowStatement
function JsThrowStatement1() {
    throw new Error();
    afterThrow();
}

// TerminatorsPlurals
function TerminatorsPlural1() {
    return;
    Statement1();
    Statement2();
    Statement3();
    Statement4();
}

function TerminatorsPlural2() {
    if (a) {
        return;
    } else {
        return;
    }

    Statement1();
    Statement2();
    Statement3();
    Statement4();
}

function TerminatorsPlural3() {
    if (a) {
        return;
    } else if(b) {
        return;
    } else {
        return;
    }

    Statement1();
    Statement2();
    Statement3();
    Statement4();
}

function TerminatorsPlural4() {
    if (a) {
        return;
    } else if(b) {
        return;
    } else if(c) {
        return;
    } else {
        return;
    }

    Statement1();
    Statement2();
    Statement3();
    Statement4();
}
```

# Diagnostics
```
warning[noDeadCode]: This code is unreachable
   ┌─ noDeadCode.js:26:5
   │
20 │         return;
   │         ------- Either this statement ...
   ·
23 │         return;
   │         ------- ... or this statement will return from the function ...
   ·
26 │     afterTryCatchReturn();
   │     ---------------------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
   ┌─ noDeadCode.js:40:5
   │
37 │         return;
   │         ------- This statement will return from the function ...
   ·
40 │     afterFinallyReturn();
   │     --------------------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
   ┌─ noDeadCode.js:51:5
   │
46 │         return;
   │         ------- Either this statement ...
47 │     } else {
48 │         return;
   │         ------- ... or this statement will return from the function ...
   ·
51 │     afterIfElseReturn();
   │     -------------------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
   ┌─ noDeadCode.js:63:14
   │
60 │         default:
   │         ------- This statement will stop the flow of the code ...
   ·
63 │         case 1: // afterDefault
   │              - ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
   ┌─ noDeadCode.js:64:13
   │
59 │             break;
   │             ------ Either this statement will break the flow of the code, ...
60 │         default:
   │         ------- ... this statement will stop the flow of the code, ...
61 │             caseDefault();
62 │             break;
   │             ------ ... or this statement will break the flow of the code ...
63 │         case 1: // afterDefault
64 │             afterDefault();
   │             --------------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
   ┌─ noDeadCode.js:72:13
   │
71 │             break;
   │             ------ This statement will break the flow of the code ...
72 │             afterBreak();
   │             ------------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
   ┌─ noDeadCode.js:78:28
   │
78 │     for(let i = 0; i < 10; ++i) {
   │                            --- This code will never be reached ...
79 │         break;
   │         ------ ... because this statement will break the flow of the code beforehand


```

```
warning[noDeadCode]: This code is unreachable
   ┌─ noDeadCode.js:87:9
   │
86 │         break;
   │         ------ This statement will break the flow of the code ...
87 │         afterBreak();
   │         ------------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
   ┌─ noDeadCode.js:94:9
   │
93 │         continue;
   │         --------- This statement will continue the loop ...
94 │         afterContinue();
   │         ---------------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:102:9
    │
101 │         break;
    │         ------ This statement will break the flow of the code ...
102 │         afterBreak();
    │         ------------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:109:9
    │
108 │         continue;
    │         --------- This statement will continue the loop ...
109 │         afterContinue();
    │         ---------------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:117:9
    │
116 │         break;
    │         ------ This statement will break the flow of the code ...
117 │         afterBreak();
    │         ------------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:125:13
    │
124 │         break;
    │         ------ This statement will break the flow of the code ...
125 │     } while(true); // afterBreak
    │             ---- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:131:9
    │
130 │         continue;
    │         --------- This statement will continue the loop ...
131 │         afterContinue();
    │         ---------------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:139:9
    │
138 │         break;
    │         ------ This statement will break the flow of the code ...
139 │         break; // afterBreak
    │         ------ ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:146:9
    │
145 │         break;
    │         ------ This statement will break the flow of the code ...
146 │         continue; // afterBreak
    │         --------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:154:9
    │
153 │         continue;
    │         --------- This statement will continue the loop ...
154 │         continue; // afterContinue
    │         --------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:161:9
    │
160 │         continue;
    │         --------- This statement will continue the loop ...
161 │         break; // afterContinue
    │         ------ ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:168:5
    │
167 │     return;
    │     ------- This statement will return from the function ...
168 │     afterReturn();
    │     -------------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:173:5
    │
172 │     return;
    │     ------- This statement will return from the function ...
173 │     return; // afterReturn
    │     ------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:179:5
    │
178 │     throw new Error();
    │     ------------------ This statement will throw an exception ...
179 │     afterThrow();
    │     ------------- ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:185:5
    │  
184 │       return;
    │       ------- This statement will return from the function ...
185 │ ┌     Statement1();
186 │ │     Statement2();
187 │ │     Statement3();
188 │ │     Statement4();
    │ └─────────────────' ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:198:5
    │  
193 │           return;
    │           ------- Either this statement ...
194 │       } else {
195 │           return;
    │           ------- ... or this statement will return from the function ...
    ·  
198 │ ┌     Statement1();
199 │ │     Statement2();
200 │ │     Statement3();
201 │ │     Statement4();
    │ └─────────────────' ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:213:5
    │  
206 │           return;
    │           ------- Either this statement, ...
207 │       } else if(b) {
208 │           return;
    │           ------- ... this statement, ...
209 │       } else {
210 │           return;
    │           ------- ... or this statement will return from the function ...
    ·  
213 │ ┌     Statement1();
214 │ │     Statement2();
215 │ │     Statement3();
216 │ │     Statement4();
    │ └─────────────────' ... before it can reach this code


```

```
warning[noDeadCode]: This code is unreachable
    ┌─ noDeadCode.js:230:5
    │  
221 │           return;
    │           ------- Either this statement, ...
222 │       } else if(b) {
223 │           return;
    │           ------- ... this statement, ...
224 │       } else if(c) {
225 │           return;
    │           ------- ... this statement, ...
226 │       } else {
227 │           return;
    │           ------- ... or this statement will return from the function ...
    ·  
230 │ ┌     Statement1();
231 │ │     Statement2();
232 │ │     Statement3();
233 │ │     Statement4();
    │ └─────────────────' ... before it can reach this code


```


